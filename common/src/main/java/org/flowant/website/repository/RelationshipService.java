package org.flowant.website.repository;

import java.util.HashMap;

import org.flowant.website.model.ContentReputation;
import org.flowant.website.model.HasMapId;
import org.flowant.website.model.HasReputation;
import org.flowant.website.model.ReplyReputation;
import org.flowant.website.model.ReputationCounter;
import org.flowant.website.model.ReviewReputation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.cassandra.core.mapping.MapId;
import org.springframework.stereotype.Component;

import reactor.core.publisher.Mono;

@Component
public class RelationshipService {

    static ContentRepository contentRepository;
    static ReviewRepository reviewRepository;
    static ReplyRepository replyRepository;

    static HashMap<Class<?>, PageableRepository<? extends HasReputation, MapId>> repoParent = new HashMap<>();

    @Autowired
    RelationshipService(ContentRepository contentRepository, ReviewRepository reviewRepository,
            ReplyRepository replyRepository) {

        RelationshipService.contentRepository = contentRepository;
        RelationshipService.reviewRepository = reviewRepository;
        RelationshipService.replyRepository = replyRepository;

        repoParent.put(ContentReputation.class, contentRepository);
        repoParent.put(ReviewReputation.class, reviewRepository);
        repoParent.put(ReplyReputation.class, replyRepository);
    }

    public static <T extends ReputationCounter> Mono<T> updateReputation(T reputationCounter) {
        PageableRepository<?, MapId> repo = repoParent.get(reputationCounter.getClass());
        return repo.updateReputationById(reputationCounter.getMapId(), reputationCounter.toReputation())
                .thenReturn(reputationCounter);
    }

    public static <T extends ReputationCounter> Mono<? extends HasReputation> findReputation(T reputationCounter) {
        PageableRepository<? extends HasMapId, MapId> repo = repoParent.get(reputationCounter.getClass());
        return repo.findById(reputationCounter.getMapId());
    }

    // XXXReputationRepository update counter values or create row if not exist to XXXRepository.
    // deleteParent is used for cleaning up test data generated by test cases.
    public static <T extends HasMapId> Mono<Void> deleteParent(T entity) {
        PageableRepository<?, MapId> repo = repoParent.get(entity.getClass());
        return repo.deleteById(entity.getMapId());
    }

}
